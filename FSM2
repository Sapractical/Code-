public class FiniteStateMachine {
    // Define the possible states
    private enum State {
        S0, S1, S2
    }

    // Initialize the current state to S0
    private State currentState = State.S0;

    // Define transition functions for each state
    private void transitionS0() {
        // Define the logic for state S0
        // For example, you can check some condition and transition to the next state accordingly.
        currentState = State.S1; // Transition to state S1
    }

    private void transitionS1() {
        // Define the logic for state S1
        // You can transition to other states based on your application's requirements.
        currentState = State.S2; // Transition to state S2
    }

    private void transitionS2() {
        // Define the logic for state S2
        // You can transition back to S0 or S1 or any other state as needed.
        currentState = State.S0; // Transition back to state S0
    }

    // Method to perform a state transition
    public void performStateTransition() {
        switch (currentState) {
            case S0:
                transitionS0();
                break;
            case S1:
                transitionS1();
                break;
            case S2:
                transitionS2();
                break;
        }
    }

    // Get the current state
    public State getCurrentState() {
        return currentState;
    }

    public static void main(String[] args) {
        FiniteStateMachine fsm = new FiniteStateMachine();

        // Perform state transitions as needed
        fsm.performStateTransition();
        System.out.println("Current State: " + fsm.getCurrentState());

        fsm.performStateTransition();
        System.out.println("Current State: " + fsm.getCurrentState());

        fsm.performStateTransition();
        System.out.println("Current State: " + fsm.getCurrentState());
    }
}
